import React, {ChangeEvent, useEffect} from "react";import style from "./PersonalInfo.module.sass";import {    Box,    Button,    Checkbox,    FormControl,    FormControlLabel,    FormGroup,    FormLabel, InputLabel, MenuItem,    Radio,    RadioGroup, Select, SelectChangeEvent,    TextField} from "@material-ui/core";import {Field, useFormik} from "formik";import {useDispatch, useSelector} from "react-redux";import {AppRootStateType} from "../store/store";import sсhema from "../sсhema.json";import {setPersonalDataAC} from "../store/personalInfo-reducer";import BirthDay from "./BirthDay";type PersonalInfoType = {    setStep: (step: number) => void}export type HobbiesType = {    [key: string]: boolean}export type BirthdayType = {    birthdayDay: string,    birthdayMonth: string,    birthdayYear: string}export const PersonalInfo = ({setStep}: PersonalInfoType) => {    const dispatch = useDispatch()    const oceanArray = sсhema.ocean.oneOf    const arrayHobbies = useSelector<AppRootStateType, HobbiesType>(state => state.personalInfo.hobbies)    // const [favoriteOcean, setOcean] = React.useState('')    // const handleChange = (event: SelectChangeEvent) => {    //     initialValues.favoriteOcean = event.target.value    //     setOcean(event.target.value as string);    // }    const formik = useFormik({        initialValues: {            firstName: '',            lastName: '',            gender: '',            birthdayDay: '',            birthdayMonth: '',            birthdayYear: '',            favoriteOcean: '',            ...arrayHobbies,        },        // validate: (values) => {        //     const errors: FormikErrorType = {};        //     if (!values.mobilePhone) {        //         errors.mobilePhone = 'Required';        //     } else if (!mobilePhoneRegExp.test(values.mobilePhone)) {        //         errors.mobilePhone = 'Invalid mobile phone';        //     }        //     if (!values.email) {        //         errors.email = 'Required';        //     } else if (!emailRegExp.test(values.email)) {        //         errors.email = 'Invalid email address';        //     }        //     if (!values.password) {        //         errors.password = 'Required';        //     } else if (values.password.length < +minLength) {        //         errors.password = 'Minimum number of characters 8';        //     } else if (values.password.length > +maxLength) {        //         errors.password = 'Maximum number of characters 20';        //     }        //     if (!values.confirmPassword) {        //         errors.confirmPassword = 'Required';        //     } else if (values.password !== values.confirmPassword) {        //         errors.confirmPassword = 'Invalid confirm password';        //     }        //     return errors;        // },        onSubmit: values => {            const hobbies = {}            ///            const data = {                ...hobbies,                date: {brithDay: values}            }            //   for()            console.log('values', values)            // dispatch(setPersonalDataAC(values))            setStep(3)        },    })    return (        <div className={style.wrapperPersonalInfo}>            <form onSubmit={formik.handleSubmit}>                <FormControl>                    <TextField style={{width: '120px'}}                               variant="outlined"                               name="firstName"                               value={formik.values.firstName}                               onChange={formik.handleChange}                               label="First name"                               helperText={formik.errors.firstName}                               margin="dense"                    />                    <TextField style={{width: '120px'}}                               variant="outlined"                               name="lastName"                               value={formik.values.lastName}                               onChange={formik.handleChange}                               label="Last name"                               helperText={formik.errors.lastName}                               margin="dense"                    />                    <FormLabel id="demo-radio-buttons-group-label" style={{fontSize: '15px'}}>Gender</FormLabel>                    <RadioGroup                        row                        aria-labelledby="row-demo-radio-buttons-group-label"                        defaultValue                        name="row-radio-buttons-group"                    >                        <FormControlLabel value="female" name="gender" control={<Radio onChange={formik.handleChange}/>}                                          label="Female"                                          style={{fontSize: '15px'}}/>                        <FormControlLabel value="male" name="gender" control={<Radio onChange={formik.handleChange}/>}                                          label="Male"                                          style={{fontSize: '15px'}}/>                        <FormControlLabel value="other" name="gender" control={<Radio onChange={formik.handleChange}/>}                                          label="Other"                                          style={{fontSize: '15px'}}/>                    </RadioGroup>                    <div className={style.birthDay}>                        <BirthDay/>                        {/*<LocalizationProvider dateAdapter={AdapterDayjs}>*/}                        {/*    <DatePicker*/}                        {/*        label="Basic example"*/}                        {/*        value={value}*/}                        {/*        onChange={(newValue) => {*/}                        {/*            setValue(newValue);*/}                        {/*        }}*/}                        {/*        renderInput={(params) => <TextField {...params} />}*/}                        {/*    />*/}                        {/*</LocalizationProvider>*/}                    </div>                    <div className={style.favoriteOcean}>                        <Box sx={{minWidth: 120}}>                            <FormControl fullWidth>                                <InputLabel id="demo-simple-select-label">Ocean</InputLabel>                                <Select                                    name="favoriteOcean"                                    labelId="demo-simple-select-label"                                    id="demo-simple-select"                                    value={formik.values.favoriteOcean}                                    label="Favorite ocean"                                    onChange={formik.handleChange}                                >                                    {oceanArray.map((ocean) => <MenuItem key={ocean} value={ocean}>{ocean}</MenuItem>)}                                </Select>                            </FormControl>                        </Box>                    </div>                    <div className={style.hobbies}>                        <Box sx={{display: 'flex'}}>                            <FormControl sx={{m: 1}} component="fieldset" variant="outlined">                                <FormLabel component="legend">Hobby</FormLabel>                                <FormGroup>                                    {Object.keys(arrayHobbies).map((h, i) => {                                        return <FormControlLabel                                            key={i}                                            control={                                                <Checkbox                                                    name={h}                                                    value={h[i]}                                                    onChange={formik.handleChange}                                                    size="small"                                                />}                                            label={h}                                        />                                    })}                                </FormGroup>                            </FormControl>                        </Box>                    </div>                    <Button className={style.submitButton} onClick={() => setStep(1)} variant={'contained'}                            color={'primary'}>                        Change SignUp                    </Button>                    <Button className={style.submitButton} type={'submit'} variant={'contained'} color={'primary'}>                        Complete                    </Button>                </FormControl>            </form>        </div>    )}