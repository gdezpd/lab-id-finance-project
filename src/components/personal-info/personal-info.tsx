import React from "react";import style from "./personal-info.module.sass";import {    Button,    Checkbox,    FormControl,    FormControlLabel,    FormGroup,    FormHelperText,    FormLabel,    InputLabel,    MenuItem,    Radio,    RadioGroup,    Select,    TextField} from "@material-ui/core";import {useFormik} from "formik";import {useDispatch, useSelector} from "react-redux";import {AppRootStateType} from "../../store/store";import schema from "../../schema.json";import {FormDataType, HobbiesType, setOpenModalAC, setPersonalDataAC} from "../../store/personal-info-reducer";type PersonalInfoType = {    setStep: (step: number) => void}type FormikErrorType = {    firstName?: string,    lastName?: string,    gender?: string,    birthdayData?: string,    favoriteOcean?: string,    hobby?: string,}export const PersonalInfo = ({setStep}: PersonalInfoType) => {    const dispatch = useDispatch()    const oceanArray = schema.ocean.oneOf    const hobbiesArray = schema.hobby.anyOf    const objectHobbies = useSelector<AppRootStateType, HobbiesType>(state => state.personalInfo.hobbies)    const minLengthFirstName = schema.firstName.minLength    const maxLengthFirstName = schema.firstName.maxLength    const minLengthLastName = schema.lastName.minLength    const maxLengthLastName = schema.lastName.maxLength    const minAge = schema.birthday.minAge    const maxAge = schema.birthday.maxAge    const formik = useFormik({        initialValues: {            firstName: '',            lastName: '',            gender: '',            birthdayData: '2000-01-01',            favoriteOcean: '',            hobby: '',            ...objectHobbies,        },        validate: (values) => {            const errors: FormikErrorType = {}            // @ts-ignore            const filtered = hobbiesArray.reduce((obj, key) => ({...obj, [key]: values[key]}), {})            if (!values.firstName) {                errors.firstName = 'Required'            } else if (values.firstName.length <= +minLengthFirstName) {                errors.firstName = 'Minimum length 2'            } else if (values.firstName.length >= +maxLengthFirstName) {                errors.firstName = 'Maximum length 30'            }            if (!values.lastName) {                errors.lastName = 'Required'            } else if (values.lastName.length <= +minLengthLastName) {                errors.lastName = 'Minimum length 2'            } else if (values.lastName.length > +maxLengthLastName) {                errors.lastName = 'Maximum length 30'            }            if (!values.gender) {                errors.gender = 'Required';            }            if (!values.birthdayData) {                errors.birthdayData = 'Required';            } else if (result <= +minAge) {                errors.birthdayData = 'Min age 18';            } else if (result >= +maxAge) {                errors.birthdayData = 'Max age 90';            }            if (Object.values(filtered).find(h => h === true)) {                return            } else {                errors.hobby = 'Min 1 hobby';            }            if (!values.favoriteOcean) {                errors.favoriteOcean = 'Required';            }            return errors;        },        onSubmit: values => {            const dataHobbies: HobbiesType = Object.fromEntries(Object.entries(values).filter(([key, value]) => 'boolean' === typeof (value)))            const arrDataHobbiesKey = Object.fromEntries(Object.entries(dataHobbies).filter(([key, value]) => value === true))            const dataHobbiesKey = Object.keys(arrDataHobbiesKey).join(', ')            const dataValues = Object.fromEntries(Object.entries(values).filter(([key, value]) => 'boolean' !== typeof (value))) as FormDataType            const valuesData = {                ...dataValues,                dataHobbies,                dataHobbiesKey            }            dispatch(setOpenModalAC(true))            dispatch(setPersonalDataAC(valuesData))        },    })    function _calculateAge(birthday: Date) {        const ageDifMs = Date.now() - birthday.getTime();        const ageDate = new Date(ageDifMs);        return Math.abs(ageDate.getUTCFullYear() - 1970);    }    let result = _calculateAge(new Date(formik.values.birthdayData))    return (        <div className={style.wrapperPersonalInfo}>            <form onSubmit={formik.handleSubmit} className={style.formClass}>                <FormControl className={style.formControlClass}>                    <div className={style.firstName}>                        <TextField fullWidth                                   variant="outlined"                                   name="firstName"                                   value={formik.values.firstName}                                   onChange={formik.handleChange}                                   label="First name"                                   error={formik.errors.firstName ? true : false}                                   helperText={formik.errors.firstName}                                   margin="dense"                        />                    </div>                    <div>                        <TextField fullWidth                                   variant="outlined"                                   name="lastName"                                   value={formik.values.lastName}                                   onChange={formik.handleChange}                                   label="Last name"                                   error={formik.errors.lastName ? true : false}                                   helperText={formik.errors.lastName}                                   margin="dense"                        />                    </div>                    <div className={style.gender}>                        <FormLabel id="demo-radio-buttons-group-label" style={{fontSize: '15px'}}>Gender</FormLabel>                        <RadioGroup                            row                            aria-labelledby="row-demo-radio-buttons-group-label"                            defaultValue                            name="row-radio-buttons-group"                        >                            <FormControlLabel value="female" name="gender"                                              control={<Radio onChange={formik.handleChange} size="small"/>}                                              label="Female"/>                            <FormControlLabel value="male" name="gender"                                              control={<Radio onChange={formik.handleChange} size="small"/>}                                              label="Male"/>                            <FormControlLabel value="other" name="gender"                                              control={<Radio onChange={formik.handleChange} size="small"/>}                                              label="Other"/>                            <FormHelperText style={{color: 'red'}}>{formik.errors.gender}</FormHelperText>                        </RadioGroup>                    </div>                    <div className={style.birthDay}>                        <TextField fullWidth                                   type='date'                                   variant="outlined"                                   name="birthdayData"                                   value={formik.values.birthdayData}                                   onChange={formik.handleChange}                                   error={formik.errors.birthdayData ? true : false}                                   helperText={formik.errors.birthdayData}                                   margin="normal"                                   size="small"                        />                    </div>                    <div className={style.favoriteOcean}>                        <FormControl fullWidth>                            <InputLabel id="demo-simple-select-label">Ocean</InputLabel>                            <Select                                name="favoriteOcean"                                labelId="demo-simple-select-label"                                id="demo-simple-select"                                value={formik.values.favoriteOcean}                                label="Favorite ocean"                                onChange={formik.handleChange}                            >                                {oceanArray.map((ocean) => <MenuItem key={ocean} value={ocean}>{ocean}</MenuItem>)}                            </Select>                        </FormControl>                        <FormHelperText style={{color: 'red'}}>{formik.errors.favoriteOcean} </FormHelperText>                    </div>                    <div className={style.hobbies}>                        <FormControl component="fieldset" variant="outlined">                            <FormLabel component="legend">Hobby</FormLabel>                            <FormGroup className={style.hobbiesStyle}>                                {Object.keys(objectHobbies).map((h, i) => {                                    return <FormControlLabel                                        key={i}                                        control={                                            <Checkbox                                                name={h}                                                value={h[i]}                                                onChange={formik.handleChange}                                                size="small"                                            />}                                        label={h}                                    />                                })}                            </FormGroup>                        </FormControl>                        <FormHelperText style={{color: 'red'}}>{formik.errors.hobby} </FormHelperText>                    </div>                    <Button style={{margin: '5px 0'}} onClick={() => setStep(1)} variant={'contained'}                            color={'primary'}>                        Change SignUp                    </Button>                    <Button style={{margin: '5px 0'}} type={'submit'} variant={'contained'} color={'primary'}>                        Complete                    </Button>                </FormControl>            </form>        </div>    )}